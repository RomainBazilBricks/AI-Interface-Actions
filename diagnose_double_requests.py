#!/usr/bin/env python3
"""
Script de diagnostic avanc√© pour analyser les doubles requ√™tes
"""

import asyncio
import aiohttp
import time
import json
from typing import List, Dict, Any

API_BASE_URL = "https://64239c9ce527.ngrok-free.app"

async def monitor_requests():
    """Surveille les requ√™tes en temps r√©el"""
    print("üîç Surveillance des requ√™tes en temps r√©el")
    print("=" * 50)
    
    async with aiohttp.ClientSession() as session:
        # 1. Vider le cache pour commencer proprement
        print("üßπ Nettoyage du cache...")
        try:
            async with session.post(f"{API_BASE_URL}/admin/clear-cache",
                                  headers={"ngrok-skip-browser-warning": "true"}) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"  ‚úÖ Cache vid√©: {data.get('cleared_cached_requests', 0)} entr√©es")
                else:
                    print(f"  ‚ùå Erreur: {response.status}")
        except Exception as e:
            print(f"  ‚ùå Exception: {e}")
        
        print()
        
        # 2. Simuler des requ√™tes pour tester la d√©duplication
        print("üß™ Test de d√©duplication avec requ√™tes simul√©es")
        
        test_message = f"Test diagnostic - {int(time.time())}"
        
        # Test 1: Requ√™te unique
        print(f"üìù Envoi d'une requ√™te unique: '{test_message}'")
        try:
            async with session.post(f"{API_BASE_URL}/debug/simulate-request",
                                  params={"message": test_message, "client_ip": "192.168.1.100"},
                                  headers={"ngrok-skip-browser-warning": "true"}) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"  ‚úÖ Hash: {data['request_hash']}, Doublon: {data['is_duplicate']}")
                else:
                    print(f"  ‚ùå Erreur: {response.status}")
        except Exception as e:
            print(f"  ‚ùå Exception: {e}")
        
        # Test 2: M√™me requ√™te (devrait √™tre d√©tect√©e comme doublon)
        print(f"üîÑ Envoi de la m√™me requ√™te (doublon attendu)")
        try:
            async with session.post(f"{API_BASE_URL}/debug/simulate-request",
                                  params={"message": test_message, "client_ip": "192.168.1.100"},
                                  headers={"ngrok-skip-browser-warning": "true"}) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"  ‚úÖ Hash: {data['request_hash']}, Doublon: {data['is_duplicate']}")
                else:
                    print(f"  ‚ùå Erreur: {response.status}")
        except Exception as e:
            print(f"  ‚ùå Exception: {e}")
        
        print()
        
        # 3. V√©rifier le statut du cache
        print("üìä Statut du cache apr√®s tests")
        try:
            async with session.get(f"{API_BASE_URL}/admin/cache-status",
                                 headers={"ngrok-skip-browser-warning": "true"}) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"  üì¶ Requ√™tes en cache: {data['cached_requests']}")
                    print(f"  ‚è≥ Requ√™tes en cours: {data['processing_requests']}")
                    print(f"  ‚è∞ √Çge max: {data['cache_max_age_seconds']}s")
                    
                    if data['cache_entries']:
                        print("  üìã Entr√©es du cache:")
                        for entry in data['cache_entries']:
                            print(f"    - {entry['hash']}: {entry['age_seconds']}s")
                else:
                    print(f"  ‚ùå Erreur: {response.status}")
        except Exception as e:
            print(f"  ‚ùå Exception: {e}")
        
        print()
        
        # 4. Test avec vraie requ√™te send-message
        print("üöÄ Test avec vraie requ√™te /send-message")
        real_test_message = f"Diagnostic r√©el - {int(time.time())}"
        
        request_data = {
            "message": real_test_message,
            "platform": "manus",
            "conversation_url": "",
            "wait_for_response": False,
            "timeout_seconds": 30
        }
        
        print(f"üì§ Envoi: '{real_test_message}'")
        
        # Envoyer deux requ√™tes rapidement
        start_time = time.time()
        
        tasks = []
        for i in range(2):
            task = send_tracked_request(session, request_data, i)
            tasks.append(task)
            if i == 0:
                await asyncio.sleep(0.1)  # Petit d√©lai entre les requ√™tes
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        end_time = time.time()
        total_time = end_time - start_time
        
        print(f"‚è±Ô∏è Temps total: {total_time:.3f}s")
        print("üìã R√©sultats:")
        
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                print(f"  Requ√™te {i+1}: ‚ùå Exception - {result}")
            else:
                status = "‚úÖ Succ√®s" if result.get("success", False) else "‚ùå √âchec"
                print(f"  Requ√™te {i+1}: {status}")
                print(f"    Status: {result.get('status_code', 'N/A')}")
                print(f"    Temps: {result.get('response_time', 0):.3f}s")
                print(f"    Request-ID: {result.get('request_id', 'N/A')}")
                if 'error' in result:
                    print(f"    Erreur: {result['error'][:100]}...")

async def send_tracked_request(session: aiohttp.ClientSession, request_data: dict, request_num: int) -> Dict[str, Any]:
    """Envoie une requ√™te avec tracking d√©taill√©"""
    headers = {
        "Content-Type": "application/json",
        "ngrok-skip-browser-warning": "true",
        "X-Debug-Request": f"diagnostic-{request_num}"
    }
    
    try:
        start_time = time.time()
        async with session.post(f"{API_BASE_URL}/send-message", 
                               json=request_data, 
                               headers=headers) as response:
            end_time = time.time()
            
            result = {
                "success": response.status == 200,
                "status_code": response.status,
                "response_time": round(end_time - start_time, 3),
                "request_id": response.headers.get("X-Request-ID", "unknown"),
                "timestamp": time.time()
            }
            
            if response.status == 200:
                data = await response.json()
                result["task_id"] = data.get("task_id")
                result["conversation_url"] = data.get("conversation_url")
            else:
                result["error"] = await response.text()
                
            return result
            
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "timestamp": time.time(),
            "response_time": 0,
            "request_id": "exception"
        }

async def main():
    """Fonction principale de diagnostic"""
    print("üî¨ Diagnostic avanc√© des doubles requ√™tes")
    print("=" * 60)
    print()
    
    # V√©rifier la connectivit√©
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_BASE_URL}/health",
                                 headers={"ngrok-skip-browser-warning": "true"}) as response:
                if response.status == 200:
                    health_data = await response.json()
                    print(f"‚úÖ API accessible - Statut: {health_data.get('status', 'unknown')}")
                    print(f"üîó URL: {API_BASE_URL}")
                else:
                    print(f"‚ùå API non accessible - Code: {response.status}")
                    return
    except Exception as e:
        print(f"‚ùå Impossible de contacter l'API: {e}")
        return
    
    print()
    
    # Lancer la surveillance
    await monitor_requests()
    
    print()
    print("‚ú® Diagnostic termin√©")
    print()
    print("üìã Recommandations:")
    print("  1. V√©rifiez les logs d√©taill√©s de votre API")
    print("  2. Si vous voyez encore des doublons, le probl√®me vient du c√¥t√© client")
    print("  3. V√©rifiez votre code JavaScript pour des event listeners multiples")
    print("  4. Utilisez les endpoints /admin/cache-status pour surveiller")

if __name__ == "__main__":
    asyncio.run(main())
